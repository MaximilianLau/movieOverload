{"version":3,"sources":["assets/logo.png","Components/Header/Header.js","Components/Footer/Footer.js","Components/Search/ImdbRating.js","Components/Search/RTRating.js","Components/Search/MTRating.js","Components/Search/AggregateRating.js","Components/Search/OmdbCall.js","Components/Search/Image.js","Components/Search/TmdbRating.js","Components/Search/PopularityRating.js","Components/Search/Genre.js","Components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","Component","Footer","href","target","rel","ImdbRating","props","undefined","rating","min","max","optimum","low","high","value","Value","substring","RTRating","replace","MTRating","AggregateRating","newIMDB","imdbRating","map","help","filterResults","parseFloat","rtRating","mtRating","tmdbRating","filter","defined","aggregate","reduce","a","b","length","toFixed","OmdbCall","state","ratingsArray","imDB","rottenTomatoes","metaCritic","tmdb","tmDBRating","url","this","moreRatings","axios","method","dataType","then","results","ratingCheck","data","Ratings","setState","IMDB","Source","rT","mT","Image","image","title","TmdbRating","PopularityRating","popularity","Genre","finalArray","genre","genreIndex","genres","id","push","name","finalGenre","join","Search","handleSubmit","event","preventDefault","userSubmit","userInput","performSearch","moviesArray","results2","genreArray","handleUserInput","action","onSubmit","htmlFor","type","placeholder","onChange","moviesList","bottom","key","backdrop_path","original_title","toUpperCase","release_date","genre_ids","vote_average","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62528526.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.03bcfef0.png\";","import React, { Component } from 'react';\r\nimport logo from '../../assets/logo.png'\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"wrapper\">\r\n        <img src={logo} alt=\"logo of the website Overload\"></img>\r\n        <h1><span>m</span>OV<span>i</span>ERLOAD</h1>\r\n        <p>movie rating aggregator</p>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n        <footer className=\"wrapper\">\r\n            <p>Copyright &copy; 2020 <a href=\"http://maximilianlau.com\" target=\"_blank\" rel=\"noopener noreferrer\">Maximilian Lau.</a></p>\r\n            <p>Powered by React, The Movies DB, and OMDB</p>\r\n        </footer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nfunction ImdbRating(props){ \r\n// Checks if each is undefined, returns rating, and bar score if it isn't, returns N/A if it is undefined\r\n    if (props.rating[0] === undefined) {\r\n        return(\r\n            <div className = \"ratingWrapper\">\r\n            <p>IMDB Rating:</p>\r\n            <div></div>\r\n            <h4 className=\"ratingNegative\">N/A</h4>\r\n            </div>\r\n        ) \r\n        } else {\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <h5>IMDB Rating:</h5>\r\n                <div className=\"rating\">\r\n                    <meter\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        optimum=\"100\"\r\n                        low=\"35\"\r\n                        high=\"70\"\r\n                        value={props.rating[0].Value.substring(0, 3)  *10}\r\n                    />\r\n                </div>\r\n                <h4 className=\"ratingScore\">{props.rating[0].Value.substring(0, 3)}</h4>\r\n            </div>\r\n            )\r\n        }\r\n    }\r\nexport default ImdbRating;","import React from 'react';\r\n\r\nfunction RTRating(props) {\r\n// Checks if each is undefined, returns rating, and bar score if it isn't, returns N/A if it is undefined\r\n    if (props.rating[0] === undefined) {\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <p>RT Rating:</p>\r\n                <div></div>\r\n                <h4 className=\"ratingNegative\">N/A</h4>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <h5>RT Rating:</h5>\r\n                <div className=\"rating\">\r\n                    <meter\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        optimum=\"100\"\r\n                        low=\"35\"\r\n                        high=\"70\"\r\n                        value={props.rating[0].Value.replace(\"%\", \"\")}\r\n                    />\r\n                </div>\r\n                <h4 className=\"ratingScore\">{props.rating[0].Value.replace(\"%\", \"\")/10}</h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RTRating;","import React from 'react';\r\n\r\nfunction MTRating(props) {\r\n// Checks if each is undefined, returns rating, and bar score if it isn't, returns N/A if it is undefined\r\n    if (props.rating[0] === undefined) {\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <p>Metacritic Rating:</p>\r\n                <div></div>\r\n                <h4 className=\"ratingNegative\">N/A</h4>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <h5>Metacritic Rating:</h5>\r\n                <div className=\"rating\">\r\n                    <meter\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        optimum=\"100\"\r\n                        low=\"35\"\r\n                        high=\"70\"\r\n                        value={props.rating[0].Value.substring(0, 2)}\r\n                    />\r\n                </div>\r\n                <h4 className=\"ratingScore\">{props.rating[0].Value.substring(0, 2) / 10}</h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default MTRating;","import React from 'react';\r\n\r\nfunction AggregateRating(props) {\r\n\r\n// Format each rating from different website into a (?.?) value\r\nconst newIMDB = props.imdbRating.map((help) => {\r\n    return props.imdbRating[0].Value.substring(0,3)\r\n})\r\nconst finalIMDB=parseFloat(newIMDB[0])\r\nconst newRT = props.rtRating.map((help) => {\r\n    return props.rtRating[0].Value.replace(\"%\", \"\")/10\r\n})\r\nconst finalRT=newRT[0]\r\nconst newMeta =props.mtRating.map((help) => {\r\n    return props.mtRating[0].Value.substring(0, 2) / 10\r\n})\r\nconst finalMeta=newMeta[0]\r\n\r\n// Put all results into an Array\r\nconst results = [finalIMDB, finalRT, finalMeta, props.tmdbRating];\r\n// remove all null, NaN values from the array\r\nconst filterResults = results.filter((defined) => {\r\n    return (defined)\r\n})\r\n// Find aggregate number rounded to first decimal place\r\n    const sum = filterResults.reduce((a, b) => a + b, 0);\r\n    const aggregate = (sum / filterResults.length).toFixed(1)\r\n    \r\n    if (aggregate >=7.0) {\r\n        return (\r\n            <div className=\"aggregate green\">\r\n                <h3>{aggregate}</h3>\r\n            </div>\r\n    )\r\n    } else if (aggregate >= 3.5 && aggregate <7.0) {\r\n        return (\r\n            <div className=\"aggregate orange\">\r\n                <h3>{aggregate}</h3>\r\n            </div>\r\n        )\r\n    } else if (aggregate >3.5 || (aggregate)) {\r\n        return (\r\n            <div className=\"aggregate red\">\r\n                <h3>{aggregate}</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AggregateRating","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport ImdbRating from './ImdbRating.js'\r\nimport RTRating from './RTRating.js'\r\nimport MTRating from './MTRating.js'\r\nimport AggregateRating from './AggregateRating.js'\r\n\r\nclass OmdbCall extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ratingsArray:[],\r\n      imDB:[],\r\n      rottenTomatoes:[],\r\n      metaCritic:[],\r\n      tmdb: props.tmDBRating\r\n    }\r\n  }\r\n\r\n// Get More Ratings from another Database searching from the Titles that were based down from the parent Component\r\n  componentDidMount() {\r\n    const url = `https://www.omdbapi.com/?apikey=accc0j453&t=${this.props.moreRatings}`;\r\n    axios({\r\n      method: 'GET',\r\n      url: url,\r\n      dataType: 'json',\r\n    }).then((results) => {\r\n      const ratingCheck = results.data.Ratings;\r\n      // console.log(results.data.Ratings)\r\n        this.setState({\r\n          ratingsArray: results.data.Ratings,\r\n        })\r\n      // Check if the Rating was valid, or an empty array\r\n      if (ratingCheck !== undefined) {\r\n      // Grab each Rotten Tomatoes score from the query\r\n        const imDB = ratingCheck.filter((IMDB) => {\r\n          return IMDB.Source === \"Internet Movie Database\"\r\n        })  \r\n      // Grab each IMDB score from the query\r\n        const rT = ratingCheck.filter((rottenTomatoes) => {\r\n          return rottenTomatoes.Source === \"Rotten Tomatoes\"\r\n        })\r\n      // Grab each Metacritic score from the query\r\n        const mT = ratingCheck.filter((metaCritic) => {\r\n          return metaCritic.Source === \"Metacritic\"\r\n        })  \r\n      // Set each individual from each website to State so that each child will have their own set of values \r\n        this.setState({\r\n          imDB: imDB,\r\n          rottenTomatoes: rT,\r\n          metaCritic: mT\r\n        })\r\n      }\r\n     })\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ImdbRating rating={this.state.imDB}/>\r\n        <RTRating rating={this.state.rottenTomatoes}/>\r\n        <MTRating rating={this.state.metaCritic}/>\r\n        <AggregateRating  imdbRating={this.state.imDB} rtRating={this.state.rottenTomatoes} mtRating={this.state.metaCritic} tmdbRating={this.state.tmdb}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default OmdbCall;","import React from 'react';\r\n\r\nfunction Image(props) {\r\n    // If image is unavailable use one that is generated by placeholder.com\r\n    if (props.image === null)\r\n    return (\r\n        <div>\r\n            <img className=\"imageResult\" src=\"https://via.placeholder.com/500x281.jpg/313131/808080?text=TOO+BAD+SO+SAD+No-Images-Available\" alt=\"Placeholder \"></img>\r\n        </div>\r\n    )\r\n    else {\r\n    return (\r\n        // return 500px backdrop image// didn't like the way the poster image looked (took too much vertical space)\r\n        <div>\r\n            <img className=\"imageResult\" src={`https://image.tmdb.org/t/p/w500/${props.image}`} alt={props.title}></img>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Image;\r\n\r\n","import React from 'react';\r\n\r\nfunction TmdbRating(props) {\r\n// Checks if each is undefined, returns rating, and bar score if it isn't, returns N/A if it is undefined\r\n    if (props.rating === undefined || props.rating === 0) {\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <p>MoviesDB Rating:</p>\r\n                <div></div>\r\n                <h4 className=\"ratingNegative\">N/A</h4>\r\n            </div>\r\n        )\r\n    } else\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <h5>MoviesDB Rating:</h5>\r\n                <div className=\"rating\">\r\n                    <meter\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        optimum=\"100\"\r\n                        low=\"35\"\r\n                        high=\"70\"\r\n                        value={props.rating * 10}\r\n                    />\r\n                </div>\r\n                <h4 className=\"ratingScore\">{props.rating}</h4>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\nexport default TmdbRating;","import React from 'react';\r\n\r\nfunction PopularityRating(props) {\r\n    return (\r\n        // Displays popularity based on TMDB aggregate \r\n        <div className=\"popularityWrapper\">\r\n            <p>Popularity:</p>\r\n            <h4 className=\"popularityScore\">{props.popularity}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default PopularityRating;","import React from 'react';\r\n\r\nfunction Genre(props) {\r\n    const finalArray = []\r\n    // First API call provided genre ids, use it to compare and get values using an index provided by second API call\r\n    props.genre.map((genre) => {\r\n        props.genreIndex.genres.map((genreIndex) => {\r\n            if (genre === genreIndex.id) {\r\n               finalArray.push(genreIndex.name)\r\n            }\r\n        });\r\n    });\r\n    // Split array into strings and add a comma and space between each\r\n    const finalGenre = finalArray.join(', ')\r\n    return (\r\n      <div>\r\n        <h5 className=\"genreType\">{finalGenre}</h5>\r\n      </div>\r\n    )    \r\n}\r\n\r\nexport default Genre;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport OmdbCall from './OmdbCall.js'\r\nimport Image from './Image.js'\r\nimport TmdbRating from './TmdbRating.js'\r\nimport PopularityRating from './PopularityRating.js'\r\nimport { RiSearchEyeLine } from 'react-icons/ri'\r\nimport Fade from 'react-reveal/Fade';\r\nimport Genre from './Genre.js';\r\n\r\nclass Search extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      userInput: '',\r\n      userSubmit:'',\r\n      moviesArray:[],\r\n      genreArray:[]\r\n    }\r\n  }\r\n  // Submit adds function into state submit, resets user input, and then calls api with the submitted query\r\n  handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    this.setState({\r\n    userSubmit: this.state.userInput\r\n    })\r\n    if (this.state.userInput !== \"\") {\r\n      this.setState({\r\n        userInput: ''\r\n      }, () => this.performSearch()) \r\n    }\r\n  }\r\n\r\n  // Axios API call for Movie Information. Saves it to this.state.moviesArray\r\n  performSearch = () =>{\r\n      const url = `https://api.themoviedb.org/3/search/movie?api_key=4e34e370c74f17cdb9f681afc05efa93&query=${this.state.userSubmit}&page=1`;\r\n    axios ({\r\n    method: 'GET',\r\n    url: url,\r\n    dataType: 'json',\r\n     }).then((results) => {\r\n    this.setState({\r\n      moviesArray: results.data.results\r\n    })\r\n  })\r\n  // Second Axios API call to get a genre Index because the main API only gives a number for genre value. Saves it into this.state.genreArray\r\n      axios({\r\n        method: 'GET',\r\n        url: `https://api.themoviedb.org/3/genre/movie/list?api_key=4e34e370c74f17cdb9f681afc05efa93&language=en-US`,\r\n        dataType: 'json',\r\n      }).then((results2) => {\r\n        this.setState({\r\n          genreArray: results2.data\r\n        })\r\n      })\r\n  }\r\n  \r\n  handleUserInput = (event) => { \r\n    //Stores user-input form the search bar into this.state.userInput\r\n    this.setState({\r\n      userInput: event.target.value,\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"wrapper\">\r\n          <form action=\"\" onSubmit={this.handleSubmit}>\r\n            <label htmlFor=\"movieName\" className=\"visuallyHidden\">enter movie name:</label>\r\n            <input type=\"text\" id=\"movieName\" name=\"movieName\" placeholder=\"OVER here!\" value={this.state.userInput}\r\n            onChange={this.handleUserInput}/> \r\n            <button type=\"submit\" id=\"movieButton\"><RiSearchEyeLine /></button>\r\n          </form>\r\n        </div>\r\n\r\n          <ul className=\"movieResults\">\r\n          {this.state.moviesArray.map((moviesList) => {\r\n            return (\r\n              <Fade bottom key={moviesList.id}>\r\n              <li className=\"movieEach\">\r\n              <Image image={moviesList.backdrop_path} title={moviesList.original_title}/>\r\n                <div>\r\n                <h2>{moviesList.original_title.toUpperCase()} \r\n                ({ moviesList.release_date === undefined \r\n                ? <p>N/A</p>\r\n                 : moviesList.release_date.substring(0, 4)}) </h2>\r\n                  <Genre genre={moviesList.genre_ids} genreIndex={this.state.genreArray}/>\r\n                  <PopularityRating popularity={moviesList.popularity}/>\r\n                  <TmdbRating rating= {moviesList.vote_average}/>\r\n                  <OmdbCall moreRatings={moviesList.original_title} tmDBRating={moviesList.vote_average}/>\r\n                </div>\r\n              </li>\r\n              </Fade>\r\n            )\r\n          })}\r\n        </ul>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Search;","import React, { Component } from 'react';\nimport Header from './Components/Header/Header.js'\nimport Footer from './Components/Footer/Footer.js'\nimport Search from './Components/Search/Search.js'\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n\n        <Search />\n\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}