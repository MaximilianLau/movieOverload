{"version":3,"sources":["assets/logoTop.png","assets/logoBottom.png","Components/Header/Header.js","Components/Footer/Footer.js","Components/Search/ImdbRating.js","Components/Search/RTRating.js","Components/Search/MTRating.js","Components/Search/AggregateRating.js","Components/Search/OmdbCall.js","Components/Search/Image.js","Components/Search/TmdbRating.js","Components/Search/PopularityRating.js","Components/Search/Genre.js","Components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logoTop","alt","logoBottom","Component","Footer","href","target","rel","ImdbRating","props","undefined","rating","min","max","optimum","low","high","value","Value","substring","RTRating","replace","MTRating","AggregateRating","newIMDB","imdbRating","map","help","filterResults","parseFloat","rtRating","mtRating","tmdbRating","filter","defined","aggregate","reduce","a","b","length","toFixed","OmdbCall","state","ratingsArray","imDB","rottenTomatoes","metaCritic","tmdb","tmDBRating","url","this","moreRatings","axios","method","dataType","then","results","ratingCheck","data","Ratings","setState","year","Year","IMDB","Source","rT","mT","Image","image","title","TmdbRating","PopularityRating","popularity","Genre","finalArray","genre","genreIndex","genres","id","push","name","finalGenre","join","Search","handleSubmit","event","preventDefault","userSubmit","userInput","performSearch","total_results","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","moviesArray","handleUserInput","genreArray","results2","action","onSubmit","htmlFor","type","placeholder","onChange","moviesList","bottom","key","backdrop_path","original_title","toUpperCase","release_date","genre_ids","vote_average","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.597a35cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logoTop.43aea44b.png\";","module.exports = __webpack_public_path__ + \"static/media/logoBottom.a7beb6b7.png\";","import React, { Component } from 'react';\r\nimport logoTop from '../../assets/logoTop.png'\r\nimport logoBottom from '../../assets/logoBottom.png'\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"wrapper\">\r\n        <div className=\"headerLogo\">\r\n        <img src={logoTop} className=\"diyLogoTop\" alt=\"top half logo, Overload\"></img>\r\n        <img src={logoBottom} alt=\"bottom half of the logo, Overload\"></img>\r\n        </div>\r\n        <h1 className=\"headerGlow\"><span>m</span>OV<span>i</span>ERLOAD</h1>\r\n        <p>movie rating aggregator</p>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"wrapper\">\r\n      <p>&copy; 2020 <a href=\"http://maximilianlau.com\" target=\"_blank\" rel=\"noopener noreferrer\">Maximilian Lau.</a></p>\r\n      <p>Powered by React, The Movies DB, and OMDB</p>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nfunction ImdbRating(props){ \r\n// Checks if each is undefined, returns rating, and bar score if it isn't, returns N/A if it is undefined\r\n    if (props.rating[0] === undefined) {\r\n        return(\r\n            <div className = \"ratingWrapper\">\r\n            <p>IMDB Rating:</p>\r\n            <div></div>\r\n            <h4 className=\"ratingNegative\">N/A</h4>\r\n            </div>\r\n        ) \r\n        } else {\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <h5>IMDB Rating:</h5>\r\n                <div className=\"rating\">\r\n                    <meter\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        optimum=\"100\"\r\n                        low=\"35\"\r\n                        high=\"70\"\r\n                        value={props.rating[0].Value.substring(0, 3)  *10}\r\n                    />\r\n                </div>\r\n                <h4 className=\"ratingScore\">{props.rating[0].Value.substring(0, 3)}</h4>\r\n            </div>\r\n            )\r\n        }\r\n    }\r\nexport default ImdbRating;","import React from 'react';\r\n\r\nfunction RTRating(props) {\r\n// Checks if each is undefined, returns rating, and bar score if it isn't, returns N/A if it is undefined\r\n    if (props.rating[0] === undefined) {\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <p>RT Rating:</p>\r\n                <div></div>\r\n                <h4 className=\"ratingNegative\">N/A</h4>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <h5>RT Rating:</h5>\r\n                <div className=\"rating\">\r\n                    <meter\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        optimum=\"100\"\r\n                        low=\"35\"\r\n                        high=\"70\"\r\n                        value={props.rating[0].Value.replace(\"%\", \"\")}\r\n                    />\r\n                </div>\r\n                <h4 className=\"ratingScore\">{props.rating[0].Value.replace(\"%\", \"\")/10}</h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RTRating;","import React from 'react';\r\n\r\nfunction MTRating(props) {\r\n// Checks if each is undefined, returns rating, and bar score if it isn't, returns N/A if it is undefined\r\n    if (props.rating[0] === undefined) {\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <p>Metacritic Rating:</p>\r\n                <div></div>\r\n                <h4 className=\"ratingNegative\">N/A</h4>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <h5>Metacritic Rating:</h5>\r\n                <div className=\"rating\">\r\n                    <meter\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        optimum=\"100\"\r\n                        low=\"35\"\r\n                        high=\"70\"\r\n                        value={props.rating[0].Value.substring(0, 2)}\r\n                    />\r\n                </div>\r\n                <h4 className=\"ratingScore\">{props.rating[0].Value.substring(0, 2) / 10}</h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default MTRating;","import React from 'react';\r\n\r\nfunction AggregateRating(props) {\r\n\r\n// Format each rating from different website into a (?.?) value\r\nconst newIMDB = props.imdbRating.map((help) => {\r\n    return props.imdbRating[0].Value.substring(0,3)\r\n})\r\nconst finalIMDB=parseFloat(newIMDB[0])\r\nconst newRT = props.rtRating.map((help) => {\r\n    return props.rtRating[0].Value.replace(\"%\", \"\")/10\r\n})\r\nconst finalRT=newRT[0]\r\nconst newMeta =props.mtRating.map((help) => {\r\n    return props.mtRating[0].Value.substring(0, 2) / 10\r\n})\r\nconst finalMeta=newMeta[0]\r\n\r\n// Put all results into an Array\r\nconst results = [finalIMDB, finalRT, finalMeta, props.tmdbRating];\r\n// remove all null, NaN values from the array\r\nconst filterResults = results.filter((defined) => {\r\n    return (defined)\r\n})\r\n// Find aggregate number rounded to first decimal place\r\n    const sum = filterResults.reduce((a, b) => a + b, 0);\r\n    const aggregate = (sum / filterResults.length).toFixed(1)\r\n    \r\n    if (aggregate >=7.0) {\r\n        return (\r\n            <div className=\"aggregate green\">\r\n                <h3>{aggregate}</h3>\r\n            </div>\r\n    )\r\n    } else if (aggregate >= 3.5 && aggregate <7.0) {\r\n        return (\r\n            <div className=\"aggregate orange\">\r\n                <h3>{aggregate}</h3>\r\n            </div>\r\n        )\r\n    } else if (aggregate >3.5 || (aggregate)) {\r\n        return (\r\n            <div className=\"aggregate red\">\r\n                <h3>{aggregate}</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AggregateRating","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport ImdbRating from './ImdbRating.js'\r\nimport RTRating from './RTRating.js'\r\nimport MTRating from './MTRating.js'\r\nimport AggregateRating from './AggregateRating.js'\r\n\r\nclass OmdbCall extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ratingsArray:[],\r\n      imDB:[],\r\n      rottenTomatoes:[],\r\n      metaCritic:[],\r\n      tmdb: props.tmDBRating,\r\n    }\r\n  }\r\n\r\n// Get More Ratings from another Database searching from the Titles that were based down from the parent Component\r\n  componentDidMount() {\r\n    const url = `https://www.omdbapi.com/?apikey=accc0453&t=${this.props.moreRatings}`;\r\n    axios({\r\n      method: 'GET',\r\n      url: url,\r\n      dataType: 'json',\r\n    }).then((results) => {\r\n      const ratingCheck = results.data.Ratings;\r\n        this.setState({\r\n          ratingsArray: results.data.Ratings,\r\n          year: results.Year\r\n        })\r\n      // Check if the Rating was valid, or an empty array\r\n      if (ratingCheck !== undefined) {\r\n      // Grab each Rotten Tomatoes score from the query\r\n        const imDB = ratingCheck.filter((IMDB) => {\r\n          return IMDB.Source === \"Internet Movie Database\"\r\n        })  \r\n      // Grab each IMDB score from the query\r\n        const rT = ratingCheck.filter((rottenTomatoes) => {\r\n          return rottenTomatoes.Source === \"Rotten Tomatoes\"\r\n        })\r\n      // Grab each Metacritic score from the query\r\n        const mT = ratingCheck.filter((metaCritic) => {\r\n          return metaCritic.Source === \"Metacritic\"\r\n        })  \r\n      // Set each individual from each website to State so that each child will have their own set of values \r\n        this.setState({\r\n          imDB: imDB,\r\n          rottenTomatoes: rT,\r\n          metaCritic: mT\r\n        })\r\n      }\r\n     })\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ImdbRating rating={this.state.imDB}/>\r\n        <RTRating rating={this.state.rottenTomatoes}/>\r\n        <MTRating rating={this.state.metaCritic}/>\r\n        <AggregateRating  imdbRating={this.state.imDB} rtRating={this.state.rottenTomatoes} mtRating={this.state.metaCritic} tmdbRating={this.state.tmdb}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default OmdbCall;","import React from 'react';\r\n\r\nfunction Image(props) {\r\n    // If image is unavailable use one that is generated by placeholder.com\r\n    if (props.image === null)\r\n    return (\r\n        <div>\r\n            <img className=\"imageResult\" src=\"https://via.placeholder.com/500x281.jpg/313131/808080?text=TOO+BAD+SO+SAD+No-Images-Available\" alt=\"Placeholder \"></img>\r\n        </div>\r\n    )\r\n    else {\r\n    return (\r\n        // return 500px backdrop image// didn't like the way the poster image looked (took too much vertical space)\r\n        <div>\r\n            <img className=\"imageResult\" src={`https://image.tmdb.org/t/p/w500/${props.image}`} alt={props.title}></img>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Image;\r\n\r\n","import React from 'react';\r\n\r\nfunction TmdbRating(props) {\r\n// Checks if each is undefined, returns rating, and bar score if it isn't, returns N/A if it is undefined\r\n    if (props.rating === undefined || props.rating === 0) {\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <p>MoviesDB Rating:</p>\r\n                <div></div>\r\n                <h4 className=\"ratingNegative\">N/A</h4>\r\n            </div>\r\n        )\r\n    } else\r\n        return (\r\n            <div className=\"ratingWrapper\">\r\n                <h5>MoviesDB Rating:</h5>\r\n                <div className=\"rating\">\r\n                    <meter\r\n                        min=\"0\"\r\n                        max=\"100\"\r\n                        optimum=\"100\"\r\n                        low=\"35\"\r\n                        high=\"70\"\r\n                        value={props.rating * 10}\r\n                    />\r\n                </div>\r\n                <h4 className=\"ratingScore\">{props.rating}</h4>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\nexport default TmdbRating;","import React from 'react';\r\n\r\nfunction PopularityRating(props) {\r\n    return (\r\n        // Displays popularity based on TMDB aggregate \r\n        <div className=\"popularityWrapper\">\r\n            <p>Popularity:</p>\r\n            <h4 className=\"popularityScore\">{props.popularity}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default PopularityRating;","import React from 'react';\r\n\r\nfunction Genre(props) {\r\n    const finalArray = []\r\n    // First API call provided genre ids, use it to compare and get values using an index provided by second API call\r\n    props.genre.map((genre) => {\r\n        props.genreIndex.genres.map((genreIndex) => {\r\n            if (genre === genreIndex.id) {\r\n               finalArray.push(genreIndex.name)\r\n            }\r\n          return null\r\n        });\r\n        return null\r\n    });\r\n    // Split array into strings and add a comma and space between each\r\n    const finalGenre = finalArray.join(', ')\r\n    return (\r\n      <div>\r\n        <h5 className=\"genreType\">{finalGenre}</h5>\r\n      </div>\r\n    )    \r\n}\r\n\r\nexport default Genre;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport OmdbCall from './OmdbCall.js'\r\nimport Image from './Image.js'\r\nimport TmdbRating from './TmdbRating.js'\r\nimport PopularityRating from './PopularityRating.js'\r\nimport { RiSearchEyeLine } from 'react-icons/ri'\r\nimport Fade from 'react-reveal/Fade';\r\nimport Genre from './Genre.js';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass Search extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      userInput: '',\r\n      userSubmit:'',\r\n      moviesArray:[],\r\n      genreArray: []\r\n    }\r\n  }\r\n  // Submit adds function into state submit, resets user input, and then calls api with the submitted query\r\n  handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    this.setState({\r\n    userSubmit: this.state.userInput\r\n    })\r\n    if (this.state.userInput !== \"\") {\r\n      this.setState({\r\n        userInput: ''\r\n      }, () => this.performSearch()) \r\n    }\r\n  }\r\n  // Axios API call for Movie Information. Saves it to this.state.moviesArray\r\n  performSearch = () =>{\r\n      const url = `https://api.themoviedb.org/3/search/movie?api_key=4e34e370c74f17cdb9f681afc05efa93&query=${this.state.userSubmit}&page=1`;\r\n    axios ({\r\n    method: 'GET',\r\n    url: url,\r\n    dataType: 'json',\r\n     }).then((results) => {\r\n    if (results.data.total_results === 0) {\r\n      toast.error('No results found for your query', {\r\n        position: \"top-center\",\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: false,\r\n        progress: undefined,\r\n        className: 'toast-alert',\r\n      });\r\n       }\r\n       else {\r\n    this.setState({\r\n      moviesArray: results.data.results\r\n    })\r\n    }\r\n  })\r\n  }\r\n  // Axios API call to get a genre Index because the API only gives a number for genre value. Saves it into this.state.genreArray\r\ncomponentDidMount() {\r\n    axios({\r\n        method: 'GET',\r\n        url: `https://api.themoviedb.org/3/genre/movie/list?api_key=4e34e370c74f17cdb9f681afc05efa93&language=en-US`,\r\n        dataType: 'json',\r\n      }).then((results2) => {\r\n        this.setState({\r\n          genreArray: results2.data\r\n        })\r\n      })\r\n    }\r\n  handleUserInput = (event) => { \r\n    //Stores user-input form the search bar into this.state.userInput\r\n    this.setState({\r\n      userInput: event.target.value,\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"wrapper\">\r\n          <form action=\"\" onSubmit={this.handleSubmit}>\r\n            <label htmlFor=\"movieName\" className=\"visuallyHidden\">enter movie name:</label>\r\n            <input type=\"text\" id=\"movieName\" name=\"movieName\" placeholder=\"OVER here!\" value={this.state.userInput}\r\n            onChange={this.handleUserInput}/> \r\n            <button type=\"submit\" id=\"movieButton\"><RiSearchEyeLine /></button>\r\n          </form>\r\n        </div>\r\n        <ToastContainer/>\r\n          <ul className=\"movieResults\">\r\n          {this.state.moviesArray.map((moviesList) => {\r\n            return (\r\n              <Fade bottom key={moviesList.id}>\r\n              <li className=\"movieEach\">\r\n              <Image image={moviesList.backdrop_path} title={moviesList.original_title}/>\r\n                <div>\r\n                <h2>{moviesList.original_title.toUpperCase()} \r\n                ({ moviesList.release_date === undefined \r\n                ? <p>N/A</p>\r\n                 : moviesList.release_date.substring(0, 4)}) </h2>\r\n                  <Genre genre={moviesList.genre_ids} genreIndex={this.state.genreArray}/>\r\n                  <PopularityRating popularity={moviesList.popularity}/>\r\n                  <TmdbRating rating= {moviesList.vote_average}/>\r\n                  <OmdbCall moreRatings={moviesList.original_title} tmDBRating={moviesList.vote_average}/>\r\n                </div>\r\n              </li>\r\n              </Fade>\r\n            )\r\n          })}\r\n        </ul>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Search;","import React, { Component } from 'react';\nimport Header from './Components/Header/Header.js'\nimport Footer from './Components/Footer/Footer.js'\nimport Search from './Components/Search/Search.js'\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n\n        <Search />\n\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}